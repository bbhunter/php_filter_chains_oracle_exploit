# python -m unittest tests.test.TestBruteforcer.test_word
from unittest import TestCase
import unittest
import subprocess

from core.bruteforcer import BaseBruteforcer

class TestBruteforcer(TestCase):
    B64_DIGITS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    WORDS = ["cm9vdDp4", "MTI9LjAu","ABCD", "////////"]
    
    def test_digit(self):
        for digit in self.B64_DIGITS:
            with self.subTest(digit=digit):
                resource = "data:text/plain;base64," + digit
                bruteforcer = Bruteforcer(resource, 0)
                try:
                    base64, _ = next(iter(bruteforcer.bruteforce()))
                except StopIteration:
                    self.fail(f"No digit was returned, expected {digit!r}")
                
                if base64 != digit:
                    self.fail(f"Base64 did not match: expected {digit!r}, got {base64!r}")
                    
    def test_word(self):
        for word in self.WORDS:
            with self.subTest(word=word):
                resource = "data:text/plain;base64," + word
                bruteforcer = Bruteforcer(resource, 0)
                base64 = None
                for i, (base64, _) in enumerate(bruteforcer.bruteforce()):
                    part = word[:i+1]
                    if base64 != part:
                        self.fail(f"Base64 did not match: expected {part!r}, got {base64!r}")
                self.assertEqual(base64, word)
    
    def test_get_nth(self):
        

class Bruteforcer(BaseBruteforcer):
    PHP_BINARY = "php"
    PAYLOAD = """
ini_set('memory_limit', '2097152');
file_get_contents('{filter}');
"""

    def __init__(self, target: str, offset: int):
        self.target = target
        super().__init__(offset)
        
    def send(self, filter: str) -> bool:
        filter = f"php://filter/{filter}/resource={self.target}AAA"
        payload = self.PAYLOAD.format(filter=filter)
        try:
            output = subprocess.check_output((self.PHP_BINARY, "-r", payload), stderr=subprocess.PIPE)
        except subprocess.CalledProcessError:
            return True
        return b'Allowed memory size of ' in output

if __name__ == "__main__":
    unittest.main()